import 'package:flutter/material.dart';
import 'package:get_it/get_it.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:tests_system/models/question_model.dart';
import 'package:tests_system/screens/result_page.dart';
import 'package:tests_system/services/quiz_service.dart';
import 'package:tests_system/widgets/question_page.dart';

class TheTests extends StatefulWidget {
  const TheTests({super.key});

  @override
  _TheTestsState createState() => _TheTestsState();
}

class _TheTestsState extends State<TheTests> {
  List<Autogenerated> questions = [];
  int currentQuestionIndex = 0;
  int correctAnswers = 0;
  PageController _pageController = PageController();

  @override
  void initState() {
    super.initState();
    _showPreTestDialog();
    _loadQuestions();
  }

  Future<void> _loadQuestions() async {
    questions = await getQuiz();
    setState(() {});
  }

  void _showPreTestDialog() {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Text("Important Notice"),
          content: Text("If your score is above 80%, you will be allowed to add a question."),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text("OK"),
            ),
          ],
        ),
      );
    });
  }

  void _answerQuestion(String answer) {
    if (answer == questions[currentQuestionIndex].correctAnswer) {
      setState(() {
        correctAnswers++;
      });
    }

    setState(() {
      if (currentQuestionIndex + 1 < questions.length) {
        currentQuestionIndex++;
        _pageController.nextPage(
            duration: Duration(milliseconds: 300), curve: Curves.easeInOut);
      } else {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (context) => ResultPage(
              correctAnswers: correctAnswers,
              totalQuestions: questions.length,
            ),
          ),
        );
      }
    });
  }

  void _addQuestion(Autogenerated newQuestion) {
    setState(() {
      questions.add(newQuestion);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Hello Mr.${GetIt.I<SharedPreferences>().getString('name')}"),
               backgroundColor: Colors.amber,
      ),
      body: questions.isEmpty
          ? Center(child: CircularProgressIndicator())
          : PageView.builder(
              controller: _pageController,
              itemCount: questions.length,
              itemBuilder: (context, index) {
                return QuestionPage(
                  question: questions[index].questionText!,
                  answers: questions[index].answers!,
                  onAnswer: _answerQuestion,
                  questionIndex: currentQuestionIndex,
                  totalQuestions: questions.length,
                );
              },
            ),
      backgroundColor: Colors.black,
    );
  }
}
